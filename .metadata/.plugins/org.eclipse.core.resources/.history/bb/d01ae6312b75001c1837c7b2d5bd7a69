package excelUtill;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class ExcelUtill {

	private  ExcelUtill() {
		
	}
  private static ExcelUtill excelObj;
	public static  ExcelUtill getExcelObj() {
		if(excelObj==null) {
			excelObj=new ExcelUtill();
		}
		
		return excelObj;
	}
	public Workbook getDataBook(String dataSheetPath) {
	
	
	Workbook workbook = null;
		File xlFile = new File(dataSheetPath);
		FileInputStream fis = null;
		try {
			fis = new FileInputStream(xlFile);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		String[] arrPath = dataSheetPath.split("\\.");
		String fileExt = arrPath[1];
		if ("xlsx".equalsIgnoreCase(fileExt)) {
			try {
				workbook = new XSSFWorkbook(fis);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} else {
			try {
				workbook = new HSSFWorkbook(fis);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return workbook;
	}
	public Sheet getDataSheet(Workbook workBook, String sheetName) {
		Sheet sheet = null;
		sheet = workBook.getSheet(sheetName);
		return sheet;
	}
	
	public String getCellData(Row dataRow, int cellNum) {
		DataFormatter df = new DataFormatter();
		Cell curCell = dataRow.getCell(cellNum, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
		return df.formatCellValue(curCell);

	}
	
	public int getColumnNumberByColumnName(Sheet sheet, String columnName) {
		Row firstRowColumns = sheet.getRow(0);
		int columnNumber = -1;
		int columnCount = firstRowColumns.getLastCellNum();
		for (int i = 0; i <= columnCount - 1; i++) {
			
			if (firstRowColumns.getCell(i).getStringCellValue().toLowerCase().contains(columnName.toLowerCase())) {
				columnNumber = i;
				break;
			}
		}
		return columnNumber;
	}
	public int getRowNumberByRowID(Sheet sheet, String rowID, String columnName) {
		int rowCount = sheet.getLastRowNum();
		int columnNumber = getColumnNumberByColumnName(sheet, columnName);
		int rowNumber = -1;
		for (int i = 1; i <= rowCount; i++) {
			Cell cell = sheet.getRow(i).getCell(columnNumber);
			if (cell != null && cell.getStringCellValue().equalsIgnoreCase(rowID)) {
				rowNumber = i;
				break;
			}
		}
		return rowNumber;
	}
	
	public List<Integer> getRowNumbersListByRowID(Sheet sheet, String columnName, String rowID) {
		List<Integer> listData = new ArrayList<Integer>();
		int rowCount = sheet.getLastRowNum();
		int columnNumber = getColumnNumberByColumnName(sheet, columnName);
		for (int i = 1; i <= rowCount; i++) {
			Cell cell = sheet.getRow(i).getCell(columnNumber);
			if (cell != null && cell.getStringCellValue().equalsIgnoreCase(rowID)) {
				listData.add(i);

			}
		}
		return listData;
	}

	public String [] getValue(String key) {
		String strArr[] = null;
		String value;
		if(key=="EHID") {
			 value=mapObj.get(key);
			strArr =value.split(",");
			return strArr;
		}else {
			 value=mapObj.get(key);
			 strArr=value.split("");
			 return strArr;
		}
		
	}
	

	private Map<String,String> mapObj=new HashMap<String,  String>();
	public Map<String, String> getDataFromExcel(String path,String sheetname,String rowName, String colnmName) {
		 

	Workbook wbook = getDataBook(path);
	Sheet sheetObj = getDataSheet(wbook, sheetname);
	int dataRowNum=getRowNumberByRowID(sheetObj, rowName, colnmName);
         Row rowObj=sheetObj.getRow(dataRowNum);
           int colunmNum = rowObj.getLastCellNum();
      
	for (int i = 1; i <= colunmNum - 1; i = i + 2) {
		  String cellDataName =rowObj.getCell(i).getStringCellValue();
		if(cellDataName.trim().equals("")) {
			break;
		}
		String cellDataValue = rowObj.getCell(i + 1).getStringCellValue();
		mapObj.put(cellDataName, cellDataValue);
	}
	return mapObj;

	}
	
	public void writeOnExcelBook() {
		  wbook=new HSSFWorkbook();
	}
	
}
